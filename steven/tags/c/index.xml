<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on .NET Junkie - Weblog of a workaholic</title>
    <link>https://blogs.cuttingedge.it/steven/tags/c/</link>
    <description>Recent content in C# on .NET Junkie - Weblog of a workaholic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blogs.cuttingedge.it/steven/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dependency Injection Principles, Practices, and Patterns</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2019/dependency-injection-principles-practices-and-patterns/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2019/dependency-injection-principles-practices-and-patterns/</guid>
      <description>The book Dependency Injection Principles, Practices, and Patterns has gone to print. For the last two years I&amp;rsquo;ve been coauthoring the book Dependency Injection Principles, Practices, and Patterns. This is a revised and expanded edition of Manning&amp;rsquo;s bestselling classic Dependency Injection in .NET by Mark Seemann.
I always loved the first edition as it was a game changer for me. I learned a lot about DI, DI Containers, and software design.</description>
    </item>
    
    <item>
      <title>Dependency Injection in Attributes: don’t do it!</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2014/dependency-injection-in-attributes-dont-do-it/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2014/dependency-injection-in-attributes-dont-do-it/</guid>
      <description>A number of common frameworks have promoted the concept of using attributes as a way of implementing AOP. On the surface this seems perfectly acceptable but in reality the maintainability of these options degrades as you add behaviors by injecting dependencies into attributes. The point of this article is “don’t do it!” There are better ways and this article will describe one such alternative. A long time has passed since the early formative stages of the .</description>
    </item>
    
    <item>
      <title>Dependency Injection anti-pattern: multiple constructors</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2013/di-anti-pattern-multiple-constructors/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2013/di-anti-pattern-multiple-constructors/</guid>
      <description>When Dependency Injection is applied correctly and completely it is important that each type only has one constructor - multiple constructors are redundant, make your DI configuration fragile, and lead to maintainability issues. rom a dependency injection perspective, our applications have two kinds of types: newables and injectables. Newables are classes that the application news up manually using the new keyword. This is true for types such as primitives, entities, DTOs, view models and messages.</description>
    </item>
    
    <item>
      <title>Writing Highly Maintainable WCF Services</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2012/writing-highly-maintainable-wcf-services/</link>
      <pubDate>Thu, 30 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2012/writing-highly-maintainable-wcf-services/</guid>
      <description>When it comes to writing maintainable software, there is no alternative to the five core principles of object-oriented design. When software is based on these principles, everything becomes significantly easier. When your software is based on these principles, writing a highly maintainable WCF web service on top of that can be done in just a matter of minutes. The code supporting this article can be found at github.com/dotnetjunkie/solidservices. Most of my clients have maintainability issues with their software.</description>
    </item>
    
    <item>
      <title>Primitive Dependencies with Simple Injector</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2012/primitive-dependencies-with-simple-injector/</link>
      <pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2012/primitive-dependencies-with-simple-injector/</guid>
      <description>This article describes how to extend the Simple Injector with convension based configuration for primitive constructor arguments. UPDATE April 2017: For a Simple Injector v4 compatible version of these code samples, please see here. When working with dependency injection, services (classes that contain behavior) depend on other services. The general idea is to inject those services into the constructor of the consuming service. Primitive types are no services, since they contain no behavior, and I normally advice not to mix primitive types and services in a single constructor.</description>
    </item>
    
    <item>
      <title>Returning data from command handlers</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2012/returning-data-from-command-handlers/</link>
      <pubDate>Sat, 14 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2012/returning-data-from-command-handlers/</guid>
      <description>This article extends the architectural design of command handlers to allow command handlers to return data. UPDATE: Although the article below might still be very entertaining, my opionion on the subject has changed. The problems described below will go away completely when you stop using use database generated IDs! Instead let the consumer of that command generate an ID (most likely a GUID). In this case, since the client creates the ID, they already have that value, and you don&amp;rsquo;t have to return anything.</description>
    </item>
    
    <item>
      <title>Meanwhile... on the query side of my architecture</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2011/meanwhile-on-the-query-side-of-my-architecture/</link>
      <pubDate>Sun, 18 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2011/meanwhile-on-the-query-side-of-my-architecture/</guid>
      <description>Command-query separation is a common concept in the software industry. Many architectures separate commands from the rest of the system and send command messages that are processed by command handlers. This same concept of messages and handlers can just as easily be applied to the query side of an architecture. There are not many systems using this technique and this article is an attempt to change that. Two simple interfaces will change the look of your architecture&amp;hellip; forever.</description>
    </item>
    
    <item>
      <title>Meanwhile... on the command side of my architecture</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2011/meanwhile-on-the-command-side-of-my-architecture/</link>
      <pubDate>Sun, 11 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2011/meanwhile-on-the-command-side-of-my-architecture/</guid>
      <description>This article describes how a single interface can transform the design of your application to be much cleaner, and more flexible than you ever thought possible. Chapter 10 of my book contains a much more elaborate version of this article. Since I began writing applications in .NET I&amp;rsquo;ve been separating operations that mutate state (of the database mostly) from operations that return data. This is basically what the Command-query separation principle is about.</description>
    </item>
    
    <item>
      <title>Adding Covariance and Contravariance to Simple Injector</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2011/adding-covariance-and-contravariance-to-simple-injector/</link>
      <pubDate>Sat, 01 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2011/adding-covariance-and-contravariance-to-simple-injector/</guid>
      <description>A few weeks back I read this question on Stack Overflow. The question was about applying covariance / contravariance (or variance for short) to the Autofac dependency injection container. The question triggered me to think about variance support in Simple Injector. I was wondering whether special changes were needed to the core framework to allow this. However, it didn&amp;rsquo;t take me long to realize that enabling variance is actually pretty easy for anyone using the Simple Injector.</description>
    </item>
    
    <item>
      <title>Dependency Injection in ASP.NET Web Forms</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2010/di-in-asp-net-web-forms/</link>
      <pubDate>Sun, 03 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2010/di-in-asp-net-web-forms/</guid>
      <description>This article describes how to create and configure a custom PageHandlerFactory class that enables automatic constructor injection for System.Web.UI.Page classes. This keeps your application design clean and allows you to keep the application’s dependency to the IoC library to a minimum. IMPORTANT: Since the introduction of Web Forms v4.7.2, there is now better support for DI. That makes this article out-dated. When working with IoC frameworks, one should always try to minimize the amount of application code that takes a dependency on that framework.</description>
    </item>
    
    <item>
      <title>Breaking changes in SmtpClient in .NET 4.0</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2010/breaking-changes-in-smtpclient-in-net40/</link>
      <pubDate>Thu, 06 May 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2010/breaking-changes-in-smtpclient-in-net40/</guid>
      <description>In .NET 4.0 the SmtpClient class now implements IDisposable. This is a breaking change what you should watch out for. For .NET 4.0 the BCL team decided to pool SMTP connections, just as .NET already did with database connections. This of course means that the SmtpClient class should implement IDisposable, just as the SqlConnection does. When STMP connections are pooled, the overhead over establishing a new connection is lowered, which is a good thing.</description>
    </item>
    
    <item>
      <title>Protecting against Regex DOS attacks</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2010/protecting-against-regex-dos-attacks/</link>
      <pubDate>Wed, 05 May 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2010/protecting-against-regex-dos-attacks/</guid>
      <description>Bryan Sullivan describes in the May issue of his MSDN article a denial of service attack that abuses regular expressions. As Bryan explains, a poorly written regex can bring your server to its knees. Bryan demonstrates that even the simplest regular expressions can bring your server to its knees. Here are some examples of regular expressions that can easily cause this to happen:
^(\d+)+$ ^(\d+)*$ ^(\d*)*$ ^(\d+|\s+)*$ ^(\d|\d\d)+$ ^(\d|\d?)+$ Read more about the causes and the cures here.</description>
    </item>
    
    <item>
      <title>The death of LINQ to SQL</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2008/the-death-of-linq-to-sql/</link>
      <pubDate>Sat, 01 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2008/the-death-of-linq-to-sql/</guid>
      <description>The Microsoft ADO.NET team blog made an important announcement yesterday about the future of LINQ to SQL. The ADO.NET team announced that Microsoft will continue to make some investments in LINQ to SQL, but they also made it pretty clear that LINQ to Entities is the recommended data access solution in the future frameworks. Microsoft will invest heavily in the Entity Framework.
I always wondered why Microsoft focused on two different O/RM technologies for the .</description>
    </item>
    
    <item>
      <title>ReadOnlyDictionary</title>
      <link>https://blogs.cuttingedge.it/steven/posts/2007/readonlydictionary/</link>
      <pubDate>Thu, 22 Nov 2007 00:00:00 +0000</pubDate>
      
      <guid>https://blogs.cuttingedge.it/steven/posts/2007/readonlydictionary/</guid>
      <description>This article describes an implementation of a ReadOnlyDictionary&amp;lt;TKey, TValue&amp;gt; that&amp;rsquo;s missing from the .NET framework. UPDATE 2012-06-05: .NET 4.5 will (finally finally!!) contain a ReadOnlyDictionary&amp;lt;TKey, TValue&amp;gt;, which will make this post (that has long be my top most googled article) finally redundant. If you&amp;rsquo;re still developing under .NET 4.0 or below, please read on. UPDATE 2013-04-11: Software license notice: I previously released this under the MIT license, but decided to change this.</description>
    </item>
    
  </channel>
</rss>